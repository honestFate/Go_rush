// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/proto/signal.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RandomSignalerClient is the client API for RandomSignaler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomSignalerClient interface {
	RandSignal(ctx context.Context, in *RandSignalRequest, opts ...grpc.CallOption) (RandomSignaler_RandSignalClient, error)
}

type randomSignalerClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomSignalerClient(cc grpc.ClientConnInterface) RandomSignalerClient {
	return &randomSignalerClient{cc}
}

func (c *randomSignalerClient) RandSignal(ctx context.Context, in *RandSignalRequest, opts ...grpc.CallOption) (RandomSignaler_RandSignalClient, error) {
	stream, err := c.cc.NewStream(ctx, &RandomSignaler_ServiceDesc.Streams[0], "/RandomSignaler/RandSignal", opts...)
	if err != nil {
		return nil, err
	}
	x := &randomSignalerRandSignalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RandomSignaler_RandSignalClient interface {
	Recv() (*RandSignalResponse, error)
	grpc.ClientStream
}

type randomSignalerRandSignalClient struct {
	grpc.ClientStream
}

func (x *randomSignalerRandSignalClient) Recv() (*RandSignalResponse, error) {
	m := new(RandSignalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RandomSignalerServer is the server API for RandomSignaler service.
// All implementations must embed UnimplementedRandomSignalerServer
// for forward compatibility
type RandomSignalerServer interface {
	RandSignal(*RandSignalRequest, RandomSignaler_RandSignalServer) error
	mustEmbedUnimplementedRandomSignalerServer()
}

// UnimplementedRandomSignalerServer must be embedded to have forward compatible implementations.
type UnimplementedRandomSignalerServer struct {
}

func (UnimplementedRandomSignalerServer) RandSignal(*RandSignalRequest, RandomSignaler_RandSignalServer) error {
	return status.Errorf(codes.Unimplemented, "method RandSignal not implemented")
}
func (UnimplementedRandomSignalerServer) mustEmbedUnimplementedRandomSignalerServer() {}

// UnsafeRandomSignalerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomSignalerServer will
// result in compilation errors.
type UnsafeRandomSignalerServer interface {
	mustEmbedUnimplementedRandomSignalerServer()
}

func RegisterRandomSignalerServer(s grpc.ServiceRegistrar, srv RandomSignalerServer) {
	s.RegisterService(&RandomSignaler_ServiceDesc, srv)
}

func _RandomSignaler_RandSignal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RandSignalRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RandomSignalerServer).RandSignal(m, &randomSignalerRandSignalServer{stream})
}

type RandomSignaler_RandSignalServer interface {
	Send(*RandSignalResponse) error
	grpc.ServerStream
}

type randomSignalerRandSignalServer struct {
	grpc.ServerStream
}

func (x *randomSignalerRandSignalServer) Send(m *RandSignalResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RandomSignaler_ServiceDesc is the grpc.ServiceDesc for RandomSignaler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RandomSignaler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RandomSignaler",
	HandlerType: (*RandomSignalerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RandSignal",
			Handler:       _RandomSignaler_RandSignal_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/signal.proto",
}
